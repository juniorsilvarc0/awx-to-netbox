---
- name: "AWX to NetBox Sync"
  hosts: localhost
  gather_facts: true

  # VariÃ¡veis que podem ser definidas no AWX Job Template:
  # inventory_filter: "VMware Inventory" (padrÃ£o) ou "all" para todos
  # host_filter: filtro regex para nomes de hosts (opcional)
  # sync_to_netbox: true/false (padrÃ£o: false)
  # dry_run: true/false (padrÃ£o: true)
  # show_details: true/false (padrÃ£o: true)
  # update_mode: "create_only" (padrÃ£o) ou "create_and_update" (futuro)

  tasks:
    - name: "Get timestamp"
      set_fact:
        sync_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H:%M:%S') }}"

    - name: "Show configuration"
      debug:
        msg: |
          ðŸ”§ AWX Job Configuration:
          - Inventory Filter: {{ inventory_filter | default('VMware Inventory') }}
          - Host Filter: {{ host_filter | default('none') }}
          - Sync to NetBox: {{ sync_to_netbox | default(false) }}
          - Dry Run: {{ dry_run | default(true) }}
          - Show Details: {{ show_details | default(true) }}

    - name: "Test AWX connectivity"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: awx_connectivity
      failed_when: awx_connectivity.status != 200

    - name: "Get inventories"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/inventories/?page_size=10000"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: awx_inventories

    - name: "Filter target inventories"
      set_fact:
        target_inventories: >-
          {{
            awx_inventories.json.results if (inventory_filter | default('VMware Inventory')) == 'all' else
            awx_inventories.json.results | 
            selectattr('name', 'in', (inventory_filter | default('VMware Inventory')).split(',') | map('trim')) | 
            list
          }}

    - name: "Get hosts from inventories"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/inventories/{{ item.id }}/hosts/?page_size=10000"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: inventory_hosts
      loop: "{{ target_inventories }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Consolidate hosts list"
      set_fact:
        all_hosts: "{{ all_hosts | default([]) + item.json.results }}"
      loop: "{{ inventory_hosts.results }}"

    - name: "Apply host filter"
      set_fact:
        filtered_hosts: >-
          {{
            all_hosts | 
            selectattr('name', 'search', host_filter) | 
            list
          }}
      when: host_filter is defined and host_filter != ""

    - name: "Use all hosts if no filter"
      set_fact:
        filtered_hosts: "{{ all_hosts }}"
      when: host_filter is not defined or host_filter == ""
      
    - name: "Filter out system hosts"
      set_fact:
        filtered_hosts: >-
          {{
            filtered_hosts | 
            rejectattr('name', 'match', '^(localhost|127\.0\.0\.1|::1)$') |
            rejectattr('name', 'match', '^(AWX|awx|tower|TOWER).*') |
            list
          }}

    - name: "Show VMs found"
      debug:
        msg: |
          Debug Info:
          - Inventories found: {{ target_inventories | length }}
          - Total hosts from AWX: {{ all_hosts | length }}
          - After filtering: {{ filtered_hosts | length }}
          - Inventory names: {{ target_inventories | map(attribute='name') | list }}
          - Filter used: {{ inventory_filter | default('VMware Inventory') }}
          - System hosts filtered: {{ (all_hosts | length) - (filtered_hosts | length) }}

    - name: "Get host details"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/hosts/{{ item.id }}/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: host_details
      loop: "{{ filtered_hosts }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Parse host variables safely"
      set_fact:
        host_variables: "{{ host_variables | default({}) | combine({item.name: parsed_vars}) }}"
      vars:
        host_detail: "{{ host_details.results[my_idx].json }}"
        raw_vars: "{{ host_detail.variables | default('{}') }}"
        parsed_vars: "{{ raw_vars if raw_vars is mapping else {} }}"
      loop: "{{ filtered_hosts }}"
      loop_control:
        index_var: my_idx
        label: "{{ item.name }}"
      failed_when: false

    - name: "Process VM data"
      set_fact:
        netbox_vms: "{{ netbox_vms | default([]) + [vm_data] }}"
      vars:
        host_detail: "{{ host_details.results[my_idx].json }}"
        host_vars: "{{ host_variables[item.name] | default({}) }}"
        vm_data:
          name: "{{ host_detail.name | regex_replace('[^a-zA-Z0-9._-]', '_') }}"
          original_name: "{{ host_detail.name }}"
          status: "{{ 'active' if (host_vars.vm_power_state | default('')) == 'poweredOn' else 'offline' }}"
          vcpus: "{{ (host_vars.vm_cpu_count | default(1) | int) }}"
          memory_mb: "{{ ((host_vars.vm_memory_gb | default(1) | float) * 1024) | int }}"
          disk_gb: "{{ (host_vars.vm_disk_total_gb | default(20) | float) }}"
          primary_ip4: "{{ host_vars.ansible_host | default('') }}"
          datacenter: "{{ host_vars.vm_datacenter | default('ATI-SLC-HCI') }}"
          awx_id: "{{ host_detail.id }}"
      loop: "{{ filtered_hosts }}"
      loop_control:
        extended: true
        index_var: my_idx
        label: "{{ item.name }}"
      failed_when: false

    - name: "Show summary"
      debug:
        msg: "Processed {{ netbox_vms | default([]) | length }} VMs from AWX"

    - name: "Test NetBox connectivity"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/"
        method: GET
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
        validate_certs: false
        return_content: true
      register: netbox_connectivity
      failed_when: netbox_connectivity.status != 200
      when: sync_to_netbox | default(false)

    - name: "Get existing VMs from NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/?page_size=10000"
        method: GET
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
        validate_certs: false
        return_content: true
      register: existing_vms_check
      when: sync_to_netbox | default(false)

    - name: "Create list of existing VM names"
      set_fact:
        existing_vm_names: "{{ existing_vms_check.json.results | map(attribute='name') | list }}"
        existing_vm_names_clean: "{{ existing_vms_check.json.results | map(attribute='name') | map('regex_replace', '[^a-zA-Z0-9._-]', '_') | list }}"
        existing_vm_cluster_names: "{{ existing_vms_check.json.results | selectattr('cluster', 'defined') | selectattr('cluster.id', 'equalto', 1) | map(attribute='name') | list }}"
      when: 
        - sync_to_netbox | default(false)
        - existing_vms_check is defined
        - existing_vms_check.json.results is defined
      
    - name: "Debug existing VMs"
      debug:
        msg: |
          Found {{ existing_vm_names | length }} existing VMs in NetBox:
          {{ existing_vm_names[:10] | join(', ') }}{{ '...' if existing_vm_names | length > 10 else '' }}
          Found {{ existing_vm_cluster_names | length }} existing VMs in cluster 1
      when: 
        - sync_to_netbox | default(false)
        - existing_vms_check is defined
        - existing_vms_check.json.results is defined

    - name: "Initialize empty list if no VMs"
      set_fact:
        existing_vm_names: []
      when: 
        - sync_to_netbox | default(false)
        - existing_vm_names is not defined

    - name: "Show VM sync plan"
      debug:
        msg: |
          Sync Plan:
          - Total VMs from AWX: {{ netbox_vms | default([]) | length }}
          - Already exist in NetBox: {{ existing_vm_names | length if existing_vm_names is defined else 0 }}
          - Will create: {{ vms_to_create | length }}
          - Will skip: {{ vms_to_skip | length }}
      vars:
        vms_to_create: "{{ (netbox_vms | default([])) | rejectattr('name', 'in', existing_vm_names | default([])) | rejectattr('name', 'in', existing_vm_names_clean | default([])) | rejectattr('name', 'in', existing_vm_cluster_names | default([])) | rejectattr('original_name', 'in', existing_vm_names | default([])) | list }}"
        vms_to_skip: "{{ (netbox_vms | default([])) | selectattr('name', 'in', existing_vm_names | default([])) | list }}"
      when: sync_to_netbox | default(false)

    - name: "Get existing sites from NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/dcim/sites/?page_size=10000"
        method: GET
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
        validate_certs: false
        return_content: true
      register: existing_sites_check
      when: sync_to_netbox | default(false)
      failed_when: false

    - name: "Create sites map"
      set_fact:
        existing_sites_map: "{{ existing_sites_map | default({}) | combine({item.name: item.id}) }}"
      loop: "{{ existing_sites_check.json.results | default([]) }}"
      when: 
        - sync_to_netbox | default(false)
        - existing_sites_check.json is defined
        - existing_sites_check.json.results is defined

    - name: "Create missing sites"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/dcim/sites/"
        method: POST
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ datacenter_item }}"
          slug: "{{ datacenter_item | lower | regex_replace('[^a-z0-9-]', '-') }}"
          description: "Site created from AWX - {{ sync_timestamp }}"
        validate_certs: false
        status_code: [200, 201]
      register: site_create_results
      loop: "{{ (netbox_vms | default([]) | map(attribute='datacenter') | unique | list) }}"
      loop_control:
        label: "{{ datacenter_item }}"
        loop_var: datacenter_item
      when: 
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - datacenter_item not in (existing_sites_map.keys() | list)
      failed_when: false

    - name: "Update sites map with new ones"
      set_fact:
        existing_sites_map: "{{ existing_sites_map | default({}) | combine({item.datacenter_item: item.json.id}) }}"
      loop: "{{ site_create_results.results | default([]) }}"
      when: 
        - sync_to_netbox | default(false)
        - item.json is defined
        - item.json.id is defined
        - item.status in [200, 201]

    - name: "Show sites mapping"
      debug:
        msg: |
          Sites mapping:
          {{ existing_sites_map | default({}) | to_nice_json }}
      when: 
        - sync_to_netbox | default(false)
        - existing_sites_map is defined

    - name: "Create new VMs in NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/"
        method: POST
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ item.name }}"
          status: "{{ item.status }}"
          site: "{{ existing_sites_map[item.datacenter] | default(1) }}"
          cluster: 1
          vcpus: "{{ item.vcpus | int }}"
          memory: "{{ item.memory_mb | int }}"
          disk: "{{ (item.disk_gb | float * 1024) | int }}"
          comments: "AWX Import {{ sync_timestamp }}{{ ' - Original: ' + item.original_name if item.original_name != item.name else '' }}"
        validate_certs: false
        status_code: [200, 201]
      register: vm_create_results
      loop: "{{ netbox_vms | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      when: 
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.name not in (existing_vm_names | default([]))
        - item.name not in (existing_vm_names_clean | default([]))
        - item.name not in (existing_vm_cluster_names | default([]))
        - item.original_name not in (existing_vm_names | default([]))
      failed_when: false

    # TODO: Implementar criaÃ§Ã£o de interfaces e IPs
    # - Buscar interfaces existentes com paginaÃ§Ã£o: ?page_size=10000
    # - Criar interfaces eth0 para VMs com IPs
    # - Criar endereÃ§os IP e associar Ã s interfaces
    # - Definir IP primÃ¡rio da VM
    
    - name: "Show sync results"
      debug:
        msg: |
          AWX VMs: {{ netbox_vms | default([]) | length }}
          Existing in NetBox: {{ existing_vm_names | length if existing_vm_names is defined else 0 }}
          Created: {{ vm_create_results.results | selectattr('status', 'defined') | selectattr('status', 'in', [200, 201]) | list | length if vm_create_results is defined and vm_create_results.results is defined else 0 }}
          Errors: {{ vm_create_results.results | selectattr('status', 'defined') | rejectattr('status', 'in', [200, 201]) | list | length if vm_create_results is defined and vm_create_results.results is defined else 0 }}
      when: sync_to_netbox | default(false)

    - name: "Show first 5 errors for debugging"
      debug:
        msg: |
          Error Details:
          VM: {{ item.item.name }}
          Status: {{ item.status | default('No status') }}
          Error: {{ item.msg | default('No error message') }}
      loop: "{{ (vm_create_results.results | selectattr('status', 'defined') | rejectattr('status', 'in', [200, 201]) | list)[:5] }}"
      loop_control:
        label: "{{ item.item.name }}"
      when: 
        - sync_to_netbox | default(false)
        - vm_create_results is defined 
        - vm_create_results.results is defined
---
- name: "AWX to NetBox Sync"
  hosts: localhost
  gather_facts: true

  tasks:
    - name: "Get timestamp"
      set_fact:
        sync_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H:%M:%S') }}"

    - name: "Test AWX connectivity"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: awx_connectivity
      failed_when: awx_connectivity.status != 200

    - name: "Get inventories"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/inventories/?page_size=10000"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: awx_inventories

    - name: "Filter target inventories"
      set_fact:
        target_inventories: >-
          {{
            awx_inventories.json.results | 
            selectattr('name', 'in', (inventory_filter | default('VMware Inventory')).split(',') | map('trim')) | 
            list
          }}

    - name: "Get hosts from inventories"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/inventories/{{ item.id }}/hosts/?page_size=10000"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: inventory_hosts
      loop: "{{ target_inventories }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Consolidate hosts list"
      set_fact:
        all_hosts: "{{ all_hosts | default([]) + item.json.results }}"
      loop: "{{ inventory_hosts.results }}"

    - name: "Apply host filter"
      set_fact:
        filtered_hosts: >-
          {{
            all_hosts | 
            selectattr('name', 'search', host_filter) | 
            list
          }}
      when: host_filter is defined and host_filter != ""

    - name: "Use all hosts if no filter"
      set_fact:
        filtered_hosts: "{{ all_hosts }}"
      when: host_filter is not defined or host_filter == ""

    - name: "Show VMs found"
      debug:
        msg: "Found {{ filtered_hosts | length }} VMs total from {{ all_hosts | length }} hosts"

    - name: "Get host details"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/hosts/{{ item.id }}/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: host_details
      loop: "{{ filtered_hosts }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Process VM data"
      set_fact:
        netbox_vms: "{{ netbox_vms | default([]) + [vm_data] }}"
      vars:
        host_detail: "{{ host_details.results[ansible_loop.index0].json }}"
        raw_vars: "{{ host_detail.variables | default('') }}"
        host_vars: >-
          {%- if raw_vars is string and raw_vars != '' and raw_vars != '{}' -%}
            {{ raw_vars | from_json }}
          {%- elif raw_vars is mapping -%}
            {{ raw_vars }}
          {%- else -%}
            {}
          {%- endif -%}
        vm_data:
          name: "{{ host_detail.name }}"
          status: "{{ 'active' if (host_vars.vm_power_state | default('')) == 'poweredOn' else 'offline' }}"
          vcpus: "{{ (host_vars.vm_cpu_count | default(1) | int) }}"
          memory_mb: "{{ ((host_vars.vm_memory_gb | default(1) | float) * 1024) | int }}"
          disk_gb: "{{ (host_vars.vm_disk_gb | default(host_vars.vm_memory_gb | default(20)) | float) }}"
          primary_ip4: "{{ host_vars.ansible_host | default('') }}"
          awx_id: "{{ host_detail.id }}"
      loop: "{{ filtered_hosts }}"
      loop_control:
        extended: true
        label: "{{ item.name }}"
      failed_when: false

    - name: "Show summary"
      debug:
        msg: "Processed {{ netbox_vms | length }} VMs from AWX"

    - name: "Test NetBox connectivity"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/"
        method: GET
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
        validate_certs: false
        return_content: true
      register: netbox_connectivity
      failed_when: netbox_connectivity.status != 200
      when: sync_to_netbox | default(false)

    - name: "Get existing VMs from NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/"
        method: GET
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
        validate_certs: false
        return_content: true
      register: existing_vms_check
      when: sync_to_netbox | default(false)

    - name: "Create list of existing VM names"
      set_fact:
        existing_vm_names: "{{ existing_vms_check.json.results | map(attribute='name') | list }}"
      when: 
        - sync_to_netbox | default(false)
        - existing_vms_check is defined
        - existing_vms_check.json.results is defined

    - name: "Initialize empty list if no VMs"
      set_fact:
        existing_vm_names: []
      when: 
        - sync_to_netbox | default(false)
        - existing_vm_names is not defined

    - name: "Create new VMs in NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/"
        method: POST
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ item.name }}"
          status: "{{ item.status }}"
          site: 1
          cluster: 1
          vcpus: "{{ item.vcpus | int }}"
          memory: "{{ item.memory_mb | int }}"
          disk: "{{ (item.disk_gb | float * 1024) | int }}"
          comments: "AWX Import {{ sync_timestamp }}"
        validate_certs: false
        status_code: [200, 201]
      register: vm_create_results
      loop: "{{ netbox_vms }}"
      loop_control:
        label: "{{ ansible_loop.index0 + 1 }}/{{ netbox_vms | length }}"
      when: 
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.name not in existing_vm_names
      failed_when: false

    - name: "Show sync results"
      debug:
        msg: |
          AWX VMs: {{ netbox_vms | length }}
          Existing in NetBox: {{ existing_vm_names | length if existing_vm_names is defined else 0 }}
          Created: {{ vm_create_results.results | selectattr('status', 'defined') | selectattr('status', 'in', [200, 201]) | list | length if vm_create_results is defined and vm_create_results.results is defined else 0 }}
          Errors: {{ vm_create_results.results | selectattr('status', 'defined') | rejectattr('status', 'in', [200, 201]) | list | length if vm_create_results is defined and vm_create_results.results is defined else 0 }}
      when: sync_to_netbox | default(false)
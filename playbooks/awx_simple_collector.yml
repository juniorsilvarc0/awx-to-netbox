---
- name: "🚀 AWX Simple Collector - Dados Essenciais para NetBox"
  hosts: localhost
  gather_facts: true

  tasks:
    - name: "⏰ Obter timestamp atual"
      set_fact:
        sync_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H:%M:%S') }}"

    - name: "🔐 Validar credentials AWX"
      debug:
        msg: |
          🔐 Validação de Credentials:
          👤 AWX Username: {{ lookup('env', 'AWX_USERNAME') | default('NÃO DEFINIDO') }}
          🔑 AWX Password: {{ 'DEFINIDO ✅' if lookup('env', 'AWX_PASSWORD') else 'NÃO DEFINIDO ❌' }}
          🔗 AWX URL: {{ awx_url | default('http://10.0.100.159:8013') }}
      failed_when: not lookup('env', 'AWX_USERNAME') or not lookup('env', 'AWX_PASSWORD')

    - name: "🔍 Testar conectividade com AWX"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: awx_connectivity
      failed_when: false

    - name: "❌ Falhar se não conseguir conectar"
      fail:
        msg: "Não foi possível conectar ao AWX. Verifique credenciais."
      when: awx_connectivity.status != 200

    - name: "📦 Buscar inventários disponíveis"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/inventories/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: awx_inventories

    - name: "🎯 Filtrar inventários alvo"
      set_fact:
        target_inventories: >-
          {{
            awx_inventories.json.results | 
            selectattr('name', 'in', (inventory_filter | default('VMware Inventory')).split(',') | map('trim')) | 
            list
          }}

    - name: "🖥️ Buscar hosts dos inventários selecionados"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/inventories/{{ item.id }}/hosts/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: inventory_hosts
      loop: "{{ target_inventories }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "🖥️ Consolidar lista de hosts"
      set_fact:
        all_hosts: "{{ all_hosts | default([]) + item.json.results }}"
      loop: "{{ inventory_hosts.results }}"

    - name: "🔍 Aplicar filtro de hosts"
      set_fact:
        filtered_hosts: >-
          {{
            all_hosts | 
            selectattr('name', 'search', host_filter) | 
            list
          }}
      when: host_filter is defined and host_filter != ""

    - name: "🔍 Usar todos os hosts se não houver filtro"
      set_fact:
        filtered_hosts: "{{ all_hosts }}"
      when: host_filter is not defined or host_filter == ""

    - name: "🎯 Limitar a 10 VMs para teste"
      set_fact:
        filtered_hosts: "{{ filtered_hosts[:10] }}"

    - name: "🔍 Buscar detalhes completos dos hosts"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/hosts/{{ item.id }}/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: host_details
      loop: "{{ filtered_hosts }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "📊 Processar dados essenciais para NetBox"
      set_fact:
        netbox_vms: "{{ netbox_vms | default([]) + [vm_data] }}"
      vars:
        host_detail: "{{ host_details.results[ansible_loop.index0].json }}"
        raw_vars: "{{ host_detail.variables | default('') }}"
        host_vars: >-
          {%- if raw_vars is string and raw_vars != '' and raw_vars != '{}' -%}
            {{ raw_vars | from_json }}
          {%- elif raw_vars is mapping -%}
            {{ raw_vars }}
          {%- else -%}
            {}
          {%- endif -%}
        vm_data:
          name: "{{ host_detail.name }}"
          description: "{{ host_detail.description | default('Importado do AWX') }}"
          power_state: "{{ host_vars.vm_power_state | default('unknown') }}"
          status: "{{ 'active' if (host_vars.vm_power_state | default('')) == 'poweredOn' else 'offline' }}"
          vcpus: "{{ (host_vars.vm_cpu_count | default(1) | int) }}"
          memory_gb: "{{ (host_vars.vm_memory_gb | default(1) | float) }}"
          memory_mb: "{{ ((host_vars.vm_memory_gb | default(1) | float) * 1024) | int }}"
          ansible_host: "{{ host_vars.ansible_host | default('') }}"
          primary_ip4: "{{ host_vars.ansible_host | default('') }}"
          vm_ip_addresses: "{{ host_vars.vm_ip_addresses | default([]) }}"
          cluster: "{{ host_vars.vm_cluster | default('Default Cluster') }}"
          datacenter: "{{ host_vars.vm_datacenter | default('Default Site') }}"
          platform: "{{ host_vars.vm_guest_os | default('Unknown OS') }}"
          awx_id: "{{ host_detail.id }}"
          awx_enabled: "{{ host_detail.enabled }}"
          awx_inventory: "{{ inventory_filter | default('VMware Inventory') }}"
          has_variables: "{{ true if host_vars else false }}"
          variables_type: "{{ raw_vars | type_debug }}"
      loop: "{{ filtered_hosts }}"
      loop_control:
        extended: true
        label: "{{ item.name }}"
      failed_when: false

    - name: "📋 Exibir dados coletados (formato NetBox)"
      debug:
        msg: |
          ============================================================
          🖥️ VM: {{ item.name }}
          📊 Status: {{ item.status | upper }}
          
          {% if item.has_variables %}
          💻 Hardware:
            - vCPUs: {{ item.vcpus }}
            - Memória: {{ item.memory_gb }}GB ({{ item.memory_mb }}MB)
          
          🌐 Rede:
            - IP Primário: {{ item.primary_ip4 if item.primary_ip4 else 'N/A' }}
          
          🏢 Localização:
            - Cluster: {{ item.cluster }}
            - Datacenter: {{ item.datacenter }}
          
          💽 Sistema: {{ item.platform }}
          ⚡ Power State: {{ item.power_state }}
          {% else %}
          ⚠️ Variáveis da VM não disponíveis
          {% endif %}
          
          🔗 AWX ID: {{ item.awx_id }}
      loop: "{{ netbox_vms }}"
      when: show_details | default(true)

    - name: "📊 Resumo final AWX"
      debug:
        msg: |
          📊 Resumo Final - Dados Coletados:
          ==========================================
          🖥️ VMs processadas: {{ (netbox_vms | default([])) | length }} de {{ (all_hosts | default([])) | length }} total
          
          📋 VMs por Status:
          {% set active_vms = (netbox_vms | default([])) | selectattr('status', 'equalto', 'active') | list %}
          {% set offline_vms = (netbox_vms | default([])) | selectattr('status', 'equalto', 'offline') | list %}
          - Ativas: {{ active_vms | length }}
          - Offline: {{ offline_vms | length }}
          
          ✅ Dados prontos para sincronização com NetBox!

    # ============================================
    # SEÇÃO NETBOX - SINCRONIZAÇÃO SIMPLES
    # ============================================

    - name: "🔐 Validar credentials NetBox"
      debug:
        msg: |
          🔐 Validação de Credentials NetBox:
          🔗 NetBox URL: {{ lookup('env', 'NETBOX_API') | default('NÃO DEFINIDO') }}
          🔑 NetBox Token: {{ 'DEFINIDO ✅' if lookup('env', 'NETBOX_TOKEN') else 'NÃO DEFINIDO ❌' }}
      when: sync_to_netbox | default(false)

    - name: "🔍 Testar conectividade com NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/"
        method: GET
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
        validate_certs: false
        return_content: true
      register: netbox_connectivity
      failed_when: false
      when: sync_to_netbox | default(false)

    - name: "❌ Falhar se não conseguir conectar ao NetBox"
      fail:
        msg: "Não foi possível conectar ao NetBox. Verifique URL e token."
      when: 
        - sync_to_netbox | default(false)
        - netbox_connectivity.status != 200

    - name: "🔍 Verificar VMs existentes no NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/"
        method: GET
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
        validate_certs: false
        return_content: true
      register: existing_vms_check
      when: sync_to_netbox | default(false)

    - name: "📊 Criar lista de nomes de VMs existentes"
      set_fact:
        existing_vm_names: "{{ existing_vms_check.json.results | map(attribute='name') | list }}"
      when: 
        - sync_to_netbox | default(false)
        - existing_vms_check is defined
        - existing_vms_check.json.results is defined

    - name: "📊 Inicializar lista vazia se não há VMs"
      set_fact:
        existing_vm_names: []
      when: 
        - sync_to_netbox | default(false)
        - existing_vm_names is not defined

    - name: "🔍 Buscar detalhes completos das VMs existentes no NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/?name={{ item.name }}"
        method: GET
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
        validate_certs: false
        return_content: true
      register: existing_vm_details
      loop: "{{ netbox_vms | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      when: 
        - sync_to_netbox | default(false)
        - item.name in (existing_vm_names | default([]))
      failed_when: false

    - name: "📋 Consolidar dados de VMs existentes"
      set_fact:
        existing_vms_data: "{{ existing_vms_data | default([]) + (item.json.results if item.json.results else []) }}"
      loop: "{{ existing_vm_details.results | default([]) }}"
      when: 
        - sync_to_netbox | default(false)
        - item.json is defined
        - item.json.results is defined

    - name: "🖥️ Criar apenas VMs que não existem no NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/"
        method: POST
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ item.name }}"
          status: "{{ item.status }}"
          site: 1
          cluster: 1
          vcpus: "{{ item.vcpus | int }}"
          memory: "{{ item.memory_mb | int }}"
          comments: |
            Importado do AWX - {{ sync_timestamp }}
            AWX ID: {{ item.awx_id }}
            Platform: {{ item.platform }}
        validate_certs: false
        status_code: [200, 201]
      register: vm_create_results
      loop: "{{ netbox_vms }}"
      loop_control:
        label: "{{ item.name }}"
      when: 
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.name not in (existing_vm_names | default([]))
      failed_when: false

    - name: "🔄 Atualizar VMs existentes no NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/{{ vm_id }}/"
        method: PATCH
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          name: "{{ item.name }}"
          status: "{{ item.status }}"
          vcpus: "{{ item.vcpus | int }}"
          memory: "{{ item.memory_mb | int }}"
          comments: |
            Atualizado do AWX - {{ sync_timestamp }}
            AWX ID: {{ item.awx_id }}
            Platform: {{ item.platform }}
        validate_certs: false
        status_code: [200, 201]
      register: vm_update_results
      loop: "{{ netbox_vms }}"
      loop_control:
        label: "{{ item.name }}"
      vars:
        vm_id: "{{ (existing_vms_data | default([]) | selectattr('name', 'equalto', item.name) | map(attribute='id') | first) | default('') }}"
      when: 
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.name in (existing_vm_names | default([]))
        - vm_id != ""
      failed_when: false

    - name: "🌐 Criar endereços IP no NetBox para VMs com IPs definidos"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/ipam/ip-addresses/"
        method: POST
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          address: "{{ ip_item }}/24"
          assigned_object_type: "virtualization.virtualmachine"
          assigned_object_id: "{{ vm_netbox_id }}"
          status: "active"
          dns_name: "{{ item.name | lower }}"
          description: "IP da VM {{ item.name }} - Importado do AWX {{ sync_timestamp }}"
        validate_certs: false
        status_code: [200, 201]
      register: ip_create_results
      loop: "{{ netbox_vms | default([]) }}"
      loop_control:
        label: "{{ item.name }} - {{ ip_item if ip_item else 'Sem IP' }}"
        loop_var: item
      vars:
        ip_item: "{{ item.primary_ip4 if item.primary_ip4 and item.primary_ip4 != '' else '' }}"
        # Busca ID da VM: primeiro tenta VMs criadas, depois VMs existentes
        vm_created_id: "{{ (vm_create_results.results | default([]) | selectattr('item.name', 'equalto', item.name) | map(attribute='json.id') | first) | default('') }}"
        vm_existing_id: "{{ (existing_vms_data | default([]) | selectattr('name', 'equalto', item.name) | map(attribute='id') | first) | default('') }}"
        vm_netbox_id: "{{ vm_created_id if vm_created_id != '' else vm_existing_id }}"
      when: 
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.primary_ip4 is defined
        - item.primary_ip4 != ""
        - item.primary_ip4 != None
        - vm_netbox_id != ""
      failed_when: false

    - name: "🔗 Atualizar VM com IP primário no NetBox"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/{{ vm_id }}/"
        method: PATCH
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          primary_ip4: "{{ ip_create_results.results | selectattr('item.name', 'equalto', item.name) | map(attribute='json.id') | first | default('') }}"
        validate_certs: false
        status_code: [200, 201]
      register: vm_update_results
      loop: "{{ netbox_vms | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      vars:
        # Busca ID da VM: primeiro tenta VMs criadas, depois VMs existentes
        vm_created_id: "{{ (vm_create_results.results | default([]) | selectattr('item.name', 'equalto', item.name) | map(attribute='json.id') | first) | default('') }}"
        vm_existing_id: "{{ (existing_vms_data | default([]) | selectattr('name', 'equalto', item.name) | map(attribute='id') | first) | default('') }}"
        vm_id: "{{ vm_created_id if vm_created_id != '' else vm_existing_id }}"
      when: 
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.primary_ip4 is defined
        - item.primary_ip4 != ""
        - item.primary_ip4 != None
        - ip_create_results is defined
        - ip_create_results.results is defined
        - vm_id != ""
      failed_when: false

    - name: "📊 Resumo da sincronização NetBox"
      debug:
        msg: |
          📊 Resumo da Sincronização NetBox:
          ==========================================
          {% if dry_run | default(true) %}
          🧪 Modo: DRY-RUN (Simulação)
          {% else %}
          🚀 Modo: EXECUÇÃO REAL
          {% endif %}
          
          🖥️ VMs do AWX: {{ (netbox_vms | default([])) | length }}
          📋 VMs existentes no NetBox: {{ existing_vm_names | length if existing_vm_names is defined else 0 }}
          🆕 VMs para criar: {{ ((netbox_vms | default([])) | rejectattr('name', 'in', existing_vm_names) | list | length) if existing_vm_names is defined else (netbox_vms | default([])) | length }}
          🔄 VMs para atualizar: {{ ((netbox_vms | default([])) | selectattr('name', 'in', existing_vm_names) | list | length) if existing_vm_names is defined else 0 }}
          
          {% if not (dry_run | default(true)) %}
          {% if (vm_create_results | default({})).results is defined %}
          {% set create_results = vm_create_results.results | default([]) %}
          ✅ VMs criadas: {{ create_results | selectattr('status', 'defined') | selectattr('status', 'in', [200, 201]) | list | length }}
          ❌ Erros criação: {{ create_results | selectattr('status', 'defined') | rejectattr('status', 'in', [200, 201]) | list | length }}
          {% endif %}
          
          {% if (vm_update_results | default({})).results is defined %}
          {% set update_results = vm_update_results.results | default([]) %}
          🔄 VMs atualizadas: {{ update_results | selectattr('status', 'defined') | selectattr('status', 'in', [200, 201]) | list | length }}
          ❌ Erros atualização: {{ update_results | selectattr('status', 'defined') | rejectattr('status', 'in', [200, 201]) | list | length }}
          {% endif %}
          
          {% set vms_with_ips = (netbox_vms | default([])) | selectattr('primary_ip4', 'defined') | selectattr('primary_ip4', 'ne', '') | list %}
          🌐 VMs com IPs: {{ vms_with_ips | length }}
          
          {% if ip_create_results is defined and ip_create_results.results is defined %}
          {% set ip_results = ip_create_results.results | default([]) %}
          ✅ IPs criados: {{ ip_results | selectattr('status', 'defined') | selectattr('status', 'in', [200, 201]) | list | length }}
          ❌ Erros IPs: {{ ip_results | selectattr('status', 'defined') | rejectattr('status', 'in', [200, 201]) | list | length }}
          {% endif %}
          
          {% if vm_update_results is defined and vm_update_results.results is defined and vm_update_results != vm_create_results %}
          {% set ip_update_results = vm_update_results.results | default([]) %}
          🔗 VMs atualizadas com IP primário: {{ ip_update_results | selectattr('status', 'defined') | selectattr('status', 'in', [200, 201]) | list | length }}
          {% endif %}
          {% endif %}
          
          💡 Estratégia: CRIAR + ATUALIZAR
          ✅ VMs e IPs sempre sincronizados!
      when: sync_to_netbox | default(false)

    - name: "🎯 Próximos passos"
      debug:
        msg: |
          🎯 Status do Projeto:
          
          ✅ Coleta AWX: FUNCIONANDO
          - {{ (netbox_vms | default([])) | length }} VMs coletadas
          - Dados completos: CPU, Memória, IP, Status
          
          {% if sync_to_netbox | default(false) %}
          ✅ Sincronização NetBox: ATIVA
          - Estratégia: Criar apenas VMs novas
          - Zero duplicatas garantidas
          {% else %}
          💡 Para habilitar sincronização NetBox:
          - Definir: sync_to_netbox=true
          - Configurar credentials NetBox
          {% endif %}
          
          🚀 Projeto completo e funcional!
          
          📈 Para escalar:
          - Remover limite de 10 VMs
          - Processar todas as {{ (all_hosts | default([])) | length }} VMs
          - Configurar execução agendada
---
- name: "AWX to NetBox Sync"
  hosts: localhost
  gather_facts: false

  tasks:

    # --- [1] Configura칞칚o inicial e coleta do AWX ---
    - name: "Get timestamp"
      set_fact:
        sync_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H:%M:%S') }}"

    - name: "Show configuration"
      debug:
        msg: |
          游댢 AWX Job Configuration:
          - Inventory Filter: {{ inventory_filter | default('VMware Inventory') }}
          - Host Filter: {{ host_filter | default('none') }}
          - Sync to NetBox: {{ sync_to_netbox | default(false) }}
          - Dry Run: {{ dry_run | default(true) }}

    - name: "Get inventories"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/inventories/?page_size=10000"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: awx_inventories

    - name: "Filter target inventories"
      set_fact:
        target_inventories: >-
          {{
            awx_inventories.json.results if (inventory_filter | default('VMware Inventory')) == 'all' else
            awx_inventories.json.results | 
            selectattr('name', 'in', (inventory_filter | default('VMware Inventory')).split(',') | map('trim')) | 
            list
          }}

    - name: "Get hosts from inventories"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/inventories/{{ item.id }}/hosts/?page_size=2000"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: inventory_hosts
      loop: "{{ target_inventories }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Consolidate hosts"
      set_fact:
        all_hosts: "{{ all_hosts | default([]) + item.json.results }}"
      loop: "{{ inventory_hosts.results }}"

    - name: "Use all hosts if no filter"
      set_fact:
        filtered_hosts: "{{ all_hosts }}"
      when: host_filter is not defined or host_filter == ""

    - name: "Get host details"
      uri:
        url: "{{ awx_url | default('http://10.0.100.159:8013') }}/api/v2/hosts/{{ item.id }}/"
        method: GET
        user: "{{ lookup('env', 'AWX_USERNAME') }}"
        password: "{{ lookup('env', 'AWX_PASSWORD') }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: host_details
      loop: "{{ filtered_hosts }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Parse host vars"
      set_fact:
        host_variables: "{{ host_variables | default({}) | combine({item.name: parsed_vars}) }}"
      vars:
        host_detail: "{{ host_details.results[my_idx].json }}"
        raw_vars: "{{ host_detail.variables | default('{}') }}"
        parsed_vars: "{{ raw_vars if raw_vars is mapping else {} }}"
      loop: "{{ filtered_hosts }}"
      loop_control:
        index_var: my_idx
      failed_when: false

    - name: "Build netbox_vms list"
      set_fact:
        netbox_vms: "{{ netbox_vms | default([]) + [vm_data] }}"
      vars:
        host_detail: "{{ host_details.results[my_idx].json }}"
        host_vars: "{{ host_variables[item.name] | default({}) }}"
        vm_data:
          name: "{{ host_detail.name | regex_replace('[^a-zA-Z0-9._-]', '_') }}"
          original_name: "{{ host_detail.name }}"
          status: "{{ 'active' if (host_vars.vm_power_state | default('')) == 'poweredOn' else 'offline' }}"
          vcpus: "{{ host_vars.vm_cpu_count | default(1) }}"
          memory_mb: "{{ (host_vars.vm_memory_gb | default(1) * 1024) | int }}"
          disk_gb: "{{ host_vars.vm_disk_total_gb | default(20) }}"
          primary_ip4: "{{ host_vars.ansible_host | default('') }}"
          datacenter: "{{ host_vars.vm_datacenter | default('ATI') }}"
      loop: "{{ filtered_hosts }}"
      loop_control:
        index_var: my_idx

    # --- [2] Paginar VMs do NetBox ---
    - name: "Paginar VMs existentes"
      set_fact:
        vm_next_url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/?limit=100"
        all_netbox_vms: []
      when: sync_to_netbox | default(false)

    - name: "Loop de pagina칞칚o de VMs"
      until: vm_page.json.next is not defined or vm_page.json.next == ""
      retries: 50
      delay: 1
      block:
        - name: "Buscar p치gina"
          uri:
            url: "{{ vm_next_url }}"
            method: GET
            headers:
              Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
            validate_certs: false
            return_content: true
          register: vm_page

        - name: "Acumular VMs"
          set_fact:
            all_netbox_vms: "{{ all_netbox_vms + (vm_page.json.results | default([])) }}"
            vm_next_url: "{{ vm_page.json.next | default(None) }}"
      when: sync_to_netbox | default(false)

    - name: "Mapear VMs"
      set_fact:
        existing_vms_map: "{{ all_netbox_vms | items2dict(key_name='name', value_name='self') }}"
      when: sync_to_netbox | default(false)

    # --- [3] Paginar interfaces ---
    - name: "Paginar interfaces"
      set_fact:
        interfaces_next_url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/interfaces/?limit=100"
        all_vm_interfaces: []
      when: sync_to_netbox | default(false)

    - name: "Loop de interfaces"
      until: interfaces_page.json.next is not defined or interfaces_page.json.next == ""
      retries: 50
      delay: 1
      block:
        - name: "Buscar p치gina"
          uri:
            url: "{{ interfaces_next_url }}"
            method: GET
            headers:
              Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
            validate_certs: false
            return_content: true
          register: interfaces_page

        - name: "Acumular interfaces"
          set_fact:
            all_vm_interfaces: "{{ all_vm_interfaces + (interfaces_page.json.results | default([])) }}"
            interfaces_next_url: "{{ interfaces_page.json.next | default(None) }}"
      when: sync_to_netbox | default(false)

    - name: "Mapear interfaces por VM"
      set_fact:
        existing_interfaces_by_vm: "{{ all_vm_interfaces | groupby('virtual_machine.name') | items2dict }}"
      when: sync_to_netbox | default(false)

    # --- [4] Criar interfaces eth0 ---
    - name: "Criar interface eth0 se necess치rio"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/interfaces/"
        method: POST
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          virtual_machine: "{{ existing_vms_map[item.name].id }}"
          name: "eth0"
          type: "1000base-t"
          enabled: true
          description: "Interface principal - Criada automaticamente do AWX"
        validate_certs: false
        status_code: [200, 201]
      loop: "{{ netbox_vms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.name in existing_interfaces_by_vm
        - "'eth0' not in (existing_interfaces_by_vm[item.name] | map(attribute='name') | list)"
      register: interface_create_results
      failed_when: false

    # --- [5] Criar endere칞o IP e associar ---
    - name: "Criar IP Address se houver IP prim치rio"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/ipam/ip-addresses/"
        method: POST
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          address: "{{ item.primary_ip4 }}/32"
          assigned_object_type: "virtualization.vminterface"
          assigned_object_id: "{{ (all_vm_interfaces | selectattr('virtual_machine.name', 'equalto', item.name) | selectattr('name', 'equalto', 'eth0') | list | first).id }}"
          description: "IP importado do AWX"
          status: "active"
        validate_certs: false
        status_code: [201]
      loop: "{{ netbox_vms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.primary_ip4 | length > 0
        - item.name in existing_interfaces_by_vm
        - "'eth0' in (existing_interfaces_by_vm[item.name] | map(attribute='name') | list)"
      register: ip_create_results
      failed_when: false

    # --- [6] Definir IP como prim치rio na VM ---
    - name: "Setar IP prim치rio na VM"
      uri:
        url: "{{ lookup('env', 'NETBOX_API') }}/api/virtualization/virtual-machines/{{ existing_vms_map[item.name].id }}/"
        method: PATCH
        headers:
          Authorization: "Token {{ lookup('env', 'NETBOX_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body:
          primary_ip4: "{{ (ip_create_results.results | selectattr('item.name', 'equalto', item.name) | map(attribute='json.id') | list | first) }}"
        validate_certs: false
        status_code: [200]
      loop: "{{ netbox_vms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - sync_to_netbox | default(false)
        - not (dry_run | default(true))
        - item.primary_ip4 | length > 0
        - item.name in existing_vms_map
        - ip_create_results is defined
      register: set_primary_ip_results
      failed_when: false

    # --- [7] Final ---
    - name: "Resumo final"
      debug:
        msg: |
          Total VMs: {{ netbox_vms | length }}
          Interfaces criadas: {{ interface_create_results.results | selectattr('status', 'in', [200,201]) | length if interface_create_results is defined else 0 }}
          IPs criados: {{ ip_create_results.results | selectattr('status', 'equalto', 201) | length if ip_create_results is defined else 0 }}
          IPs prim치rios definidos: {{ set_primary_ip_results.results | selectattr('status', 'equalto', 200) | length if set_primary_ip_results is defined else 0 }}
